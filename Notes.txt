-----------------------------------------------------------------------------------------------------------------------
--------------------------------------------------Otros comandos
docker build -t nombreImagen [-f nombreArchivo] . = En caso que el Dockerfile tenga otro nombre, -f = Apunte a este archivo

docker rm -fv $(docker ps -aq) = Elimina TODOS los contenedores

docker rm -fv nombreContenedor = Elimina un contenedor, v = elimina tambien el volumen del contenedor

docker rmi nombreImagen:tag = Para eliminar una imagen con su tiqueta

docker rmi ID = Para eliminar una imagen con su ID

docker ps [-a] [-l]= Para ver los contenedores que están corriendo, -a = todos los contenedores apagados/corriendo, -l = mostrar el último contenedor creado

docker history -H nombreImagen:tag = Para las ver capas que fueron creadas

docker run -d [--rm] [--network nombreNetwork] [--ip ipNetwork] [-m "cantMemoriamb/gb"] --name nombreContenedor [-p puertoLocal:puertoContenedor] nombreImagen:tag [cmd/bash] = Para crear un contenedor. NOTA: Lo que está entre [] es opcional
        •--rm = Se destruye el contenedor automanticamente despues salirse o detenerse,
        •--network = Para agregar una red al contenedor, en caso de no agregar una red, usará la red por efecto "bridge", puede agregarse la red HOST/NONE
        •-m = cantidad de memoria a asignar expresada en mb/gb,
        •-p = Para agregar un puerto al contenedor
        •cmd/bash = se ingresa el CMD que uno quisiera usar para reemplazar el que está por defecto, 
        •--ip = Asignar una IP estatica al contenedor


docker images -a = Mostrar todas las imagenes

docker images -f dangling=true/false = Va a mostrar todas las imagenes que no esten referenciadas (que sean <none>) en caso de ser true

docker images -f dangling=true -q | xargs docker rmi = Para eliminar todas las imagenes que esten colgadas, el -q nos muestra solo el ID

openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout nombreArchivo.key -out nombreArchivo.crt = Instalar el certificado SSL

docker stats nombreContenedor = Verificar cuanta RAM está usando el contenedor

docker copiarArchivo nombreContenedor:pegarArchivo = Copia un archivo de nuestro local a una ruta dentro del contenedor Docker

docker nombreContenedor:copiarArchivo copiarArchivoLocal = Copia un archivo dentro del contenedor para pegarlo en una ruta local

docker inspec nombreContenedor = Se mostrar informacion del contenedor

docker info | grep -i root = Mostrara la ubicacion del document root

docker exec nombreContenedor bash -c "ping idContenedor/nombreContenedor" = Para saber si hay comunicacion entre 2 contenedores

docker network rm nombreNetwork = Para eliminar redes

docker-compose build = Para construir imagenes con docker-compose

docker-compose [-f nombreArchivoDokerCompose] up -d = Esto en caso que se cambie el nombre del archivo docker-compose.yml
-----------------------------------------------------------------------------------------------------------------------
--------------------------------------------------Introducción

DOCKER
    Es una herramienta que permite desplegar aplicaciones en contenedores, de forma rápida y portable, está compuesto por imágenes (toda la configuración que el software necesita, librerias, aplicaciones...) y contenedores (donde se vuelve realidad)

ARQUITECTURA
    -Docker Host: Lugar donde se aloja Docker
    -Docker Daemon: El que da todos los servicios al sistema, reside en el host
    -Rest API: Intermediario entre el Cliente y el Server
    -Docker CLI - Client: Reside en el host, cuando se escribe algún comando Docker, se pueden manejar Contenedores, imágenes, Volúmenes y Redes
    
IMAGEN
    Contiene toda la configuración necesaria para que funcionen el servicio en un archivo llamado Dockerfile, se puede componen de muchas capas y estas capas son de solo lectura, algunas son:
        1-FROM: Ubicación del SO
        2-RUN: Instalación de paquetes
        3-CMD: Levanta el servicio o, un comando que inicie los procesos de capa anterior, mientras el CMD se esté ejecutando, la aplicacion

CONTENEDOR
    Instancia en ejecución de lo que es una imagen, además, todo lo que se ejecute en esta capa es temporal, este va a almacenar la IMAGEN, VOLUMENES y REDES, esto sería un proceso aislado no consumiría que un proceso común

-----------------------------------------------------------------------------------------------------------------------
--------------------------------------------------Docker Images
Ir al sitio del https://hub.docker.com/ para descargar imagenes
    -docker pull nombreImagen[:versionEspecifica(este paso del tag es opcional)]
    -docker images | grep nombreImagen: Para ver la imagenes que tengo instaladas de la imagen especificada

CREANDO UNA IMAGEN
    -nano Dockerfile o abrir con el editor preferido
    -1 Capa
        -FROM nombreImagen:tag
    -2 Capa
        -Instalando programas
            1-docker build -t o --tag nombreTag . = Para construir imagenes tomando como base un Dockerfile, con el . se le dice que tome el Dockerfile que tengamos
            2-CMD nombreServicio DFOREGROUND = Para mantener corriendo el CMD
            3-Paso 1

DOCKERFILE: Archivo donde se realizan las configuraciones de la imagen

FROM / RUN / COPY / ADD
    -FROM = SO
    -RUN = Lineas de comando, se instalan los paquetes y para configuraciones
    -COPY rutaFolder/archivo archivoDondeSeGuardará = Copiar archivos de la máquina hacia la imagen
    -ADD fuenteURL/ruta archivoDondeSeGuardará = No permite agregar directamente urls's hacia un archivo

ENV / WORKDIR / EXPOSE
    -ENV nombreVariable valorVariable = 
    -WORKDIR = Donde estamos trabajando actualmente
    -EXPOSE = Usar un puerto distinto al que usaria apache, pero al hacer esto, se tendria que modificar

LABEL / USER / VOLUME
    -LABELS = Son para poder agregar informacion en cualquier parte del codigo
    -USER = Que usuario va a usar
    -VOLUME = Manera de colocar los datos persistentes dentro del contenedor

CMD / DOCKERIGNORE
    -CMD = Comando que se ejecuta cuando se crea un contenedor
    -DOCKERIGNORE = Ignorar archivos que nosotros queramos

BUENAS PRACTICAS
    -Efimero: Que la imagen o contenedor sean Efimeros

-----------------------------------------------------------------------------------------------------------------------
--------------------------------------------------Contenedores
Los cambios en los contenedores son temporales, por lo que si se quiere que un cambio sea permanentes, deben ser creados en la imagen

COMANDOS DE CONTENEDORES
    -docker logs -f nombreContenedor = Muestra el log

    -docker start/stop/restart nombreContenedor/ID  = Para iniciar, detener o reiniciar un contenedor

    -docker exec [-u nombreUsuario(puede ser root o el nombre del contenedor)] -ti [-e "nombreVariable=valorVariable"] nombreContenedor/ID bash = Me permitirá usar el bash dentro del contenedor, t = terminal, i = interactivo, -e = por si se quisiera agregar una variable de entorno

    -exit = Salir del contenedor

LIMITAR RECURSOS DEL CONTENEDOR
    -docker run --help | grep cpu: Para ver los comandos relacionados al CPU, se deberá usar la opción
        --cpuset-cpus cpusPorUsar, ej: docker run -d -m "1gb" --cpuset-cpus 0-1 --name nombreContenedor nombreImagen, use solamente el cpu 0 y 1

CONVERTIR UN CONTENEDOR A IMAGEN
    -docker commit nombreContenedor nombreNuevaImagen = Convierte el contenedor a una imagen sin afectar el contenedor
    -dicker run -dti --name nombreContenedor nombreImagen /bin/bash = Crea un nuevo contenedor, para la parte de /bin/bash, se debe de correr el comando -docker ps- solamente para verificar que esté usando bash o el que aparezca

-----------------------------------------------------------------------------------------------------------------------
--------------------------------------------------Docker Volumenes
Permiten almacenar data persistente del contenedor, es decir, le indicamos a Docker que no borre la informacion de las carpetas que nosotros le decimos, una vez hayamos detenido el contedor
Tipos
    -HOST = Son los que se almacenan en el docker host y estan en la ubicacion que elijamos en el Dockerfile
    -ANONYMOUS = Docker genera una carpeta random y ahi guarda la informacion aleatoriamente
    -NAMED VOLUMES = Son carpetas administradas meramente por Docker y tienen un nombre

COMANDOS--------------------
    -docker volume ls = Muestra todos los volumenes
    -docker volume rm IdVolume = Elimina el volumen especificado


VOLUMENES HOST
    -docker run -d --name db -p puertoLocal:puertoContenedor -e "MYSQL_ROOT_PASSWORD=nuevaContrasenia" -v dirLocal:dirContenedor nombreImagen:tag = Lo que está en la dir local, se mapee a la dir del contenedor y la informacion se va a guardar en esa direccion, por lo que si se elimina el contenedor o se detiene, la informacion ya quedó almacenda en ese lugar

VOLUMENES ANONIMOS
    -docker info | grep -i root = Mostrará la Ubicación del root Docker, dentro de esta carpeta Docker guarda los datos de los Volumene Anonimos (porque el nombre de la carpeta es asignado por docker), luego se ejecuta el comando de VOLUMENES HOST

VOLUMENES NOMBRADOS
    Es una combinacion de los volumenes Anonimos y de Host

    COMANDOS
        -docker volume create nombreVolumen = Se creará un nuevo volumen y se almacenará en el ruta que se muestre en muestre con el comando "docker info | grep -i root"
        -docker run -d --name db -p puertoLocal:puertoContenedor -e "MYSQL_ROOT_PASSWORD=nuevaContrasenia" -v nombreVolumen:dirContenedor nombreImagen:tag = En lugar de mapear a una direccion, mapea al volumen creado, para este caso, no afecta si se ejecuta el comando de eliminar el Contenedor con el volumen

VOLUMENES DANGLING
    Volumenes que no están en uso, no están usandos por ningun contenedor

    COMANDOS
        -docker volume ls [-f dangling=true/false]= Muestra todos los volumenes
        -docker volume -f dangling=true -q | xargs docker volume rm = Esto funciona solamente en LINUX

 COMPARTIR VOLUMENES ENTRE 1 O MAS CONTENEDORES
    Lo que se tiene que hacer es, crear un archivo bash o lo que necesite, luego copiar la ruta del archivo que se deberá de replicar en la ruta del contenedor, se lo unico que se mantiene igual es la ruta del rutaFolderLocal, el resto cambia para que no de conflictos
    -docker run -d --name nombreContenedor -v rutaFolderLocal:rutaFolderContenedor [-p puertoLocal:puertoContenedor] nombreImagen:tag
    EJ -docker run -d --name gen -v "$PWD/Compartido":/opttest
       -docker run -d --name nginx -v "$PWD/Compartido":/usr/share/nginx/html -p 81:80 nginx:alpine

-----------------------------------------------------------------------------------------------------------------------
--------------------------------------------------Redes
Tipos de Redes
    Bridge
    Host
    None
    Overlay

REDES POR DEFECTO
    La red por defecto es Bridge, si no se especifica una, la red estará en bridge
    COMANDOS
        -docker network ls = Ver todas las redes de Docker
        -docker network ls | grep bridge/nombreNetwork = Ver las redes que sean bridge/nombre de alguna red
        -docker network inspect nombreRed = Nos muestra toda la informacion de la red especificada

CREAR UNA RED
    COMANDOS
        -docker network nombreNetwork = Crear una nueva red
        -docker network create -d driverNetwork(default) --subnet ipSubnet/24 --gateway ipGateway nombreRed
            EJ: docker network create -d bridge --subnet 172.124.10.0/24 --gateway 172.124.10.1 docker-test-network

CONECTAR CONTENEDORES A DISTINTAS REDES
    COMANDOS
        -docker network connect/disconnect nombreNetwork nombreContenedor = Conectar/desconecta una red al contenedor

ASIGNAR IP A UN CONTENEDOR
    Pasos
        -Se debe conocer cual es la subnet (docker network inspect nombreNetwork)

RED HOST 
    El contenedor usará el mismo IP del servidor real que tengamos.

RED NONE
    Se utiliza para indicar que un contenedor no tiene asignada una red.

-----------------------------------------------------------------------------------------------------------------------
--------------------------------------------------Docker Compose
Es una herramienta que nos permite crear aplicaciones multicontenedor

COMANDOS
    -docker-compose up -d = Para correr los archivos de docker-compose.yml.
    -docker-compose down = Elimina el docker compose
    NOTA: Tiene que estar dentro del folder para poder correr los comandos