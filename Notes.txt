-----------------------------------------------------------------------------------------------------------------------
--------------------------------------------------Otros comandos
docker build -t nombreImagen -f nombreArchivo . = En caso que el Dockerfile tenga otro nombre, -f = Apunte a este archivo

docker rm -fv nombreContenedor = Elimina un contenedor

docker rmi nombreImagen:tag = Para eliminar una imagen con su tiqueta

docker rmi ID = Para eliminar una imagen con su ID

docker ps [-a] = Para ver los contenedores que están corriendo, con el -a es para verlos todos apagados/corriendo

docker history -H nombreImagen:tag = Para las ver capas que fueron creadas

docker run -d --name nombreContenedor nombreImagen:tag = Para crear un contenedor

docker run -d --name nombreContenedor -p puertoLocal:puertoContenedor nombreImagen:tag = Para crear un contenedor con puerto

docker images -a = Mostrar todas las imagenes

docker images -f dangling=true/false = Va a mostrar todas las imagenes que no esten referenciadas (que sean <none>) en caso de ser true

docker images -f dangling=true -q | xargs docker rmi = Para eliminar todas las imagenes que esten colgadas, el -q nos muestra solo el ID

openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout nombreArchivo.key -out nombreArchivo.crt = Instalar el certificado SSL

-----------------------------------------------------------------------------------------------------------------------
--------------------------------------------------Introducción

DOCKER
    Es una herramienta que permite desplegar aplicaciones en contenedores, de forma rápida y portable, está compuesto por imágenes (toda la configuración que el software necesita, librerias, aplicaciones...) y contenedores (donde se vuelve realidad)

ARQUITECTURA
    -Docker Host: Lugar donde se aloja Docker
    -Docker Daemon: El que da todos los servicios al sistema, reside en el host
    -Rest API: Intermediario entre el Cliente y el Server
    -Docker CLI - Client: Reside en el host, cuando se escribe algún comando Docker, se pueden manejar Contenedores, imágenes, Volúmenes y Redes
    
IMAGEN
    Contiene toda la configuración necesaria para que funcionen el servicio en un archivo llamado Dockerfile, se puede componen de muchas capas y estas capas son de solo lectura, algunas son:
        1-FROM: Ubicación del SO
        2-RUN: Instalación de paquetes
        3-CMD: Levanta el servicio o, un comando que inicie los procesos de capa anterior, mientras el CMD se esté ejecutando, la aplicacion

CONTENEDOR
    Instancia en ejecución de lo que es una imagen, además, todo lo que se ejecute en esta capa es temporal, este va a almacenar la IMAGEN, VOLUMENES y REDES, esto sería un proceso aislado no consumiría que un proceso común

-----------------------------------------------------------------------------------------------------------------------
--------------------------------------------------Docker Images
Ir al sitio del https://hub.docker.com/ para descargar imagenes
    -docker pull nombreImagen[:versionEspecifica(este paso del tag es opcional)]
    -docker images | grep nombreImagen: Para ver la imagenes que tengo instaladas de la imagen especificada

CREANDO UNA IMAGEN
    -nano Dockerfile o abrir con el editor preferido
    -1 Capa
        -FROM nombreImagen:tag
    -2 Capa
        -Instalando programas
            1-docker build -t o --tag nombreTag . = Para construir imagenes tomando como base un Dockerfile, con el . se le dice que tome el Dockerfile que tengamos
            2-CMD nombreServicio DFOREGROUND = Para mantener corriendo el CMD
            3-Paso 1

DOCKERFILE: Archivo donde se realizan las configuraciones de la imagen

FROM / RUN / COPY / ADD
    -FROM = SO
    -RUN = Lineas de comando, se instalan los paquetes y para configuraciones
    -COPY rutaFolder/archivo archivoDondeSeGuardará = Copiar archivos de la máquina hacia la imagen
    -ADD fuenteURL/ruta archivoDondeSeGuardará = No permite agregar directamente urls's hacia un archivo

ENV / WORKDIR / EXPOSE
    -ENV nombreVariable valorVariable = 
    -WORKDIR = Donde estamos trabajando actualmente
    -EXPOSE = Usar un puerto distinto al que usaria apache, pero al hacer esto, se tendria que modificar

LABEL / USER / VOLUME
    -LABELS = Son para poder agregar informacion en cualquier parte del codigo
    -USER = Que usuario va a usar
    -VOLUME = Manera de colocar los datos persistentes dentro del contenedor

CMD / DOCKERIGNORE
    -CMD = Comando que se ejecuta cuando se crea un contenedor
    -DOCKERIGNORE = Ignorar archivos que nosotros queramos

BUENAS PRACTICAS
    -Efimero: Que la imagen o contenedor sean Efimeros

-----------------------------------------------------------------------------------------------------------------------
--------------------------------------------------Contenedores
Los cambios en los contenedores son temporales, por lo que si se quiere que un cambio sea permanentes, deben ser creados en la imagen

COMANDOS DE CONTENEDORES
    -docker logs -f nombreContenedor = Muestra el log

    -docker start/stop/restart nombreContenedor/ID  = Para iniciar, detener o reiniciar un contenedor

    -docker exec [-u nombreUsuario(puede ser root o el nombre del contenedor)] -ti [-e "nombreVariable=valorVariable"] nombreContenedor/ID bash = Me permitirá usar el bash dentro del contenedor, t = terminal, i = interactivo, -e = por si se quisiera agregar una variable de entorno

    -exit = Salir del contenedor

 